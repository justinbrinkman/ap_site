<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-05T21:59:35-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Apply Python</title><subtitle>Programming - Statistics - Engineering</subtitle><entry><title type="html">Estimating Pi with Geometry and the Monte Carlo Method</title><link href="http://localhost:4000/python/tutorials/2019/05/05/estimating-pi-geometry-monte-carlo.html" rel="alternate" type="text/html" title="Estimating Pi with Geometry and the Monte Carlo Method" /><published>2019-05-05T12:30:46-05:00</published><updated>2019-05-05T12:30:46-05:00</updated><id>http://localhost:4000/python/tutorials/2019/05/05/estimating-pi-geometry-monte-carlo</id><content type="html" xml:base="http://localhost:4000/python/tutorials/2019/05/05/estimating-pi-geometry-monte-carlo.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;One cool application of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo method&lt;/a&gt; is to estimate 
the value of pi. Simple geometric equations can be used in conjunction with Python’s “random” module to do this. The
most common and straightforward method is to take a square inscribed in a circle (2D geometry), randomly generate 
points inside the square, and measure how many of those points fall inside the circle. I decided it would be 
fun and highly necessary to experiment with this method using 3D and 4D geometry.&lt;/p&gt;

&lt;p&gt;This post will cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The use of Python to estimate pi using 2D, 3D, and 4D geometry&lt;/li&gt;
  &lt;li&gt;The analysis, comparison and improvement of the run-times of each of the algorithms&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please enjoy the conspicuous use of engineering paper for drawings!&lt;/p&gt;

&lt;h1 id=&quot;basic-principles-and-2d-method&quot;&gt;Basic Principles and 2D Method&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/photos/estimatepi1.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Consider the drawing above. We have a circle (radius = 1) centered at (0,0) inscribed in a square (side length = 2). 
Their respective areas are as follows:&lt;/p&gt;

&lt;p&gt;$A_{circle} = \pi r^{2} = \pi (1)^{2} = \pi $&lt;br /&gt;
$A_{square} = length^{2} = 2^{2} = 4$&lt;/p&gt;

&lt;p&gt;Thus, $\frac{A_{circle}}{A_{square}} = \frac{\pi}{4}$&lt;/p&gt;

&lt;p&gt;By randomly generating $n$ points inside the square, we can expect the ratio of points within the circle to total 
points to be $\pi / 4$ for very large values of $n$. That is, $\frac{points\ in\ circle}{points\ in\ square} \approx \frac{\pi}{4}$. 
So we can rearrange to get the following equation:&lt;/p&gt;

&lt;p&gt;$\pi \approx 4*\frac{points\ in\ circle}{points\ in\ square}$&lt;/p&gt;

&lt;p&gt;To generate points, we can perform a Monte Carlo simulation in Python. This is the first step:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We will define a function &lt;code class=&quot;highlighter-rouge&quot;&gt;montecarlo2d(num_simulations)&lt;/code&gt; so we can specify how many points (simulations) we want to 
generate. We will generate random points inside the square by randomly generating values for x and y between -1 and 1. If 
you take a look at the first drawing, you will notice that these points will, indeed, fall within the square.&lt;/p&gt;

&lt;p&gt;Remember the general equation for a circle: $(x-h)^{2} + (y-k)^{2} = r^{2}$ where $(h,k)$ is the center point. In this case, 
the center is at $(0,0)$ with radius = 1, yielding the equation $x^{2}+y^{2} = 1^{2}$. This is derived from the Pythagorean 
theorem, and may be more obvious by taking another look at the first drawing.&lt;/p&gt;

&lt;p&gt;So if $x^{2}+y^{2}\leq 1$, then the point is inside the circle.&lt;/p&gt;

&lt;p&gt;The code for this function is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montecarlo2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_cir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num_cir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num_sq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_cir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;num_simulations&lt;/code&gt; set to one million, I get the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; montecarlo2d(1000000)
3.142092
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Not a bad estimate! Now let’s do it in 3-dimensional space.&lt;/p&gt;

&lt;h1 id=&quot;3d-method&quot;&gt;3D Method&lt;/h1&gt;

&lt;p&gt;The underlying principle of this method is the same as in 2-dimensions, but instead of relating circle and square areas
we will relate sphere and cube volumes. We will consider a sphere of radius = 1 inscribed in a cube of length = 2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/estimatepi2.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;$V_{sphere} = \frac{4}{3}\pi r^3 = \frac{4}{3}\pi (1)^3 = \frac{4}{3}\pi$&lt;br /&gt;
$V_{cube} = length^3 = 2^(3) = 8$&lt;/p&gt;

&lt;p&gt;Thus, $\frac{V_{sphere}}{V_{cube}} = \frac{1}{6}\pi$&lt;br /&gt;
$\pi \approx 6*\frac{points\ in\ sphere}{points\ in\ cube}$&lt;/p&gt;

&lt;p&gt;Given the general equation of a sphere $(x-a)^{2}+(y-b)^{2}+(z-c)^{2} = r^{2}$, with $(a,b,c)$ replaced by our 
center point $(0,0,0)$ and radius = 1, we get $x^{2}+y^{2}+z^{2}=1$. If $x^{2}+y^{2}+z^{2}\leq1$ then the point is 
inside the sphere.&lt;/p&gt;

&lt;p&gt;The code for this function is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montecarlo3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_sph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_cube&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num_sph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num_cube&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_sph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; montecarlo3d(1000000)
3.1385879999999995
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Seems simple enough. Why not try it in 4D space?&lt;/p&gt;

&lt;h1 id=&quot;4d-method&quot;&gt;4D Method&lt;/h1&gt;

&lt;p&gt;We will consider a &lt;a href=&quot;https://en.wikipedia.org/wiki/N-sphere&quot;&gt;4D hypersphere&lt;/a&gt; of radius = 1 centered at the point $(0,0,0,0)$ 
inscribed in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypercube&quot;&gt;4D hypercube&lt;/a&gt; (or tesseract) with length 2 in each direction. 
Please forgive the lack of a hand-drawing for this example.&lt;/p&gt;

&lt;p&gt;After doing some googling, I found the equation for hypervolume of a 4D hypersphere:&lt;/p&gt;

&lt;p&gt;$V_{hypersphere} = \frac{1}{2}\pi^{2}r^{4}$&lt;/p&gt;

&lt;p&gt;And, as expected for the 4D hypercube: $V_{hypercube} = length^{4}$&lt;/p&gt;

&lt;p&gt;Plugging in our values and simplifying:&lt;/p&gt;

&lt;p&gt;$\frac{V_{hypersphere}}{V_{hypercube}} = \frac{\frac{1}{2}\pi^{2}1^{4}}{2^{4}} = \frac{1}{32}\pi^{2}$&lt;/p&gt;

&lt;p&gt;So $\pi \approx \sqrt{32*\frac{points\ in\ hypersphere}{points\ in\ hypercube}}$&lt;/p&gt;

&lt;p&gt;This will follow the same pattern as the previous methods in that $(x_{1})^{2}+(x_{2})^{2}+(x_{3})^{2}+(x_{4})^{2}=1$. 
If this sum is less than or equal to 1, then the point falls within the hypersphere.&lt;/p&gt;

&lt;p&gt;The code for this function is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montecarlo4d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_nsphere&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_hypercube&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num_nsphere&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num_hypercube&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nsphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_hypercube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; montecarlo4d(1000000)
3.140491681249928
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It actually works!&lt;/p&gt;

&lt;h1 id=&quot;algorithm-analysis&quot;&gt;Algorithm Analysis&lt;/h1&gt;

&lt;p&gt;Now, let’s measure the run-times of each of these functions using &lt;code class=&quot;highlighter-rouge&quot;&gt;time.time()&lt;/code&gt;, and plot with
&lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib.plotly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/estimatepi3.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing surprising here; run time increases as spatial dimensions are added. This is likely due to the increase 
in randomly generated values assigned to variables, and the general complexity of calculations.&lt;/p&gt;

&lt;p&gt;These algorithms would still take a long time to run for, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;num_simulations = 100 million&lt;/code&gt;. Let’s 
see if we can make these functions run faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPROVEMENTS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-For each of the functions, we can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;random.uniform(-1,-1)&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;random.random()&lt;/code&gt; which simply 
generates a decimal value between 0 and 1. This should be quicker than the former, and won’t affect the outcome 
because these values are squared in the next step.&lt;/p&gt;

&lt;p&gt;-We can delete the variable that counts the number of points within the square (or cube or hypercube). This 
number is simply equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;num_simulations&lt;/code&gt; and its computation is wasting valuable time!&lt;/p&gt;

&lt;p&gt;Let’s see how much of a difference these changes make.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/estimatepi4.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow! Compare the y-axis scale on this plot with the previous plot. &lt;strong&gt;These changes cut our run-time 
approximately in half!&lt;/strong&gt; This is a bit of an eye-opener to the impact of just a few lines of code. There are many 
solutions to the same problem, and speed can certainly be an important factor on large-scale projects or resource-
intensive scripts. In this case, it’s not all that important unless you want to run a very large number of simulations.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;A few takeaways from this project:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Monte Carlo simulations are highly interesting and very do-able in Python.&lt;/li&gt;
  &lt;li&gt;Even a few lines of code can have a major impact on run-time, and I will definitely look for ways to improve my 
algorithms in future projects. This is something I haven’t cared too much about in the past.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Feel free to check out my code for this project in &lt;a href=&quot;https://github.com/justinbrinkman/applypython&quot;&gt;my GitHub repository&lt;/a&gt; 
and experiment with it or use it for your own project.&lt;/p&gt;

&lt;p&gt;Thanks for reading and feel free to leave a comment or visit the ‘Connect’ page!&lt;/p&gt;</content><author><name></name></author><category term="monte" /><category term="carlo" /><category term="simulation" /><category term="dimensions" /><category term="2d" /><category term="3d" /><category term="4d" /><category term="geometry" /><category term="pi" /><category term="estimate" /><summary type="html">Introduction</summary></entry><entry><title type="html">Monte Carlo Simulation - Financial Risk Analysis for a Manufacturing Line</title><link href="http://localhost:4000/python/tutorials/2019/04/16/monte-carlo-simulation-in-python.html" rel="alternate" type="text/html" title="Monte Carlo Simulation - Financial Risk Analysis for a Manufacturing Line" /><published>2019-04-16T18:30:46-05:00</published><updated>2019-04-16T18:30:46-05:00</updated><id>http://localhost:4000/python/tutorials/2019/04/16/monte-carlo-simulation-in-python</id><content type="html" xml:base="http://localhost:4000/python/tutorials/2019/04/16/monte-carlo-simulation-in-python.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo Simulation&lt;/a&gt; is a method used for risk assessment
in project management, finance and general forecasting.  This technique is an effective way to simulate potential 
outcomes of a given decision, and is particularly useful when the analysis is based on estimated values.&lt;/p&gt;

&lt;p&gt;I originally developed a Monte Carlo program out of necessity. I was working on an engineering risk analysis and couldn’t 
find a good tool to perform this technique. I found many confusing Excel plug-ins and expensive dedicated software packages.
So I decided to create my own Monte Carlo program!&lt;/p&gt;

&lt;p&gt;In this article, we will run a simple Monte Carlo simulation to determine if a new manufacturing line is a good investment.
Rather than guessing if we will break even, let’s use statistics!&lt;/p&gt;

&lt;h1 id=&quot;prepare-the-data&quot;&gt;Prepare the Data&lt;/h1&gt;

&lt;p&gt;A potential client requests 90,000-120,000 bottles per year of a new specialty bottled drink and wants to pay no more than
$1.75 per bottle.  We want to know if we should invest in a new manufacturing line to fulfill this request.  Our company 
likes payback periods to be under 2 years for new projects. Can we make our money back on this project in 2 years?&lt;/p&gt;

&lt;p&gt;We found quotes for equipment, installation and ingredient costs, and our data is as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Capital Cost:		$300,000&lt;/li&gt;
  &lt;li&gt;Operating Cost:	$1.00/bottle&lt;/li&gt;
  &lt;li&gt;Production:		90,000-120,000 bottles/year&lt;/li&gt;
  &lt;li&gt;Selling Price:	$1.75/bottle (maximum)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we don’t really &lt;em&gt;know&lt;/em&gt; that the capital cost of the project will be $300,000 or that the drink will cost $1.00/bottle to
manufacture.  These are our expected &lt;em&gt;averages&lt;/em&gt;, and any profit calculations we do with these numbers will be subject to 
error.  The real world is not always average.  This is where Monte Carlo comes in handy.&lt;/p&gt;

&lt;p&gt;To prepare this data for a Monte Carlo simulation, we should come up with ranges for each uncertain category such that we 
are 90% sure the actual value will fall somewhere within the range.  Let’s use the following ranges:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Capital Cost:		$250,000-350,000&lt;/li&gt;
  &lt;li&gt;Operating Cost:	$0.80 - $1.20/bottle&lt;/li&gt;
  &lt;li&gt;Production:		90,000 - 120,000 bottles/year&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;develop-the-monte-carlo-program&quot;&gt;Develop the Monte Carlo Program&lt;/h1&gt;

&lt;p&gt;First thing’s first, we need to import pandas, norm, pyplot and statistics.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.stats&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;statistics&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now it’s time to do some statistics.  We want to convert our expected values and 90% ranges into &lt;em&gt;normal
distributions&lt;/em&gt;.  Remember that 90% of normally distributed data is found within +/- 1.645 standard deviations of the
mean, so this means that there are 2*1.645 = 3.29 standard deviations within our ranges.  Other values could be used
for this variable if we wanted to use a different confidence level.&lt;/p&gt;

&lt;p&gt;To generate these normal distributions, we can use the following code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;num_stdev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.29&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;capital_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;350000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_stdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;operating_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_stdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_stdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s time for the simulation.  We want to randomly generate values from these distributions so that they can be 
used to calculate net profit.  Let’s generate one million values for each category.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;capital_cost_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capital_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;operating_cost_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operating_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;production_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_simulations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And let’s put these results into a dataframe called “data”:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;capital_cost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capital_cost_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;operating_cost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operating_cost_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;benefits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;production_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Notice that the “benefits” column is calculated by multiplying production results (bottles/year) by the selling price
($1.75/bottle).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The top 5 rows of our data should look something like this, though your randomized data may look a bit different:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/montecarlo1.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Excellent.  Now let’s create a new column to show net profit for each simulation.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net_profit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;benefits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capital_cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operating_cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Notice that the net profit is calculated as total benefits - capital cost - total operating costs.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Total Benefits: benefits ($/year) * desired payback (years)&lt;/li&gt;
  &lt;li&gt;Total Operating Costs: operating costs ($/bottle) * production (bottles/year) * desired payback (years)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We now have a net profit column that holds values corresponding to each row in our dataframe. This dataframe should
have one million rows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/montecarlo2.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s visualize net_profit.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_profit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net profit ($)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/photos/montecarlo3.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;interpret-the-results&quot;&gt;Interpret the Results&lt;/h1&gt;

&lt;p&gt;Let’s calculate the mean and standard deviation of net_profit.  We can then use these values to calculate the 
z-score of the break-even point (zero net profit).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stdev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statistics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_profit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statistics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_profit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;z_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using norm.cdf() we can convert this z-score to a probability.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The estimated probability of breaking even after 2 years: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here is my output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photos/montecarlo4.PNG&quot; alt=&quot;screenshot&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that approximately 57% of the data in the histogram is to the right of zero.  This means that 57% of our 
simulations were profitable in the specified payback period.&lt;/p&gt;

&lt;h1 id=&quot;communicate-the-results&quot;&gt;Communicate the Results&lt;/h1&gt;

&lt;p&gt;We can say that if we sell the product at $1.75/bottle, we estimate a 57% chance of breaking even in
2 years. (This might not sound very attractive to our boss.)&lt;/p&gt;

&lt;p&gt;However, if we run the simulation again with a 3 year payback, we estimate a 95% chance of breaking even. 
(Our boss might like the sound of that!)&lt;/p&gt;

&lt;p&gt;Accepting a longer payback may even allow us to lower our price from $1.75 in order to ensure customer satisfaction. 
This analysis can be run for multiple price points and payback periods to evaluate many different scenarios.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;As you can see, Monte Carlo simulation is a powerful tool for assessing risk by predicting future outcomes. 
There are many applications for this technique, and this post highlights just one example. This type of analysis
can be performed in Excel or with other tools, but programming it in Python is easy and fast.&lt;/p&gt;

&lt;p&gt;I hope this post provides you with a basic understanding of Monte Carlo theory and gives you ideas for how to do 
your own analysis. Maybe you can account for depreciation and interest. Feel free to visit the ‘Connect’ page 
or leave a comment below!&lt;/p&gt;

&lt;p&gt;Also, feel free to download this Jupyter Notebook from &lt;a href=&quot;https://github.com/justinbrinkman/applypython&quot;&gt;my GitHub repository&lt;/a&gt; 
and use/edit it for your own project.&lt;/p&gt;</content><author><name></name></author><category term="monte" /><category term="carlo" /><category term="simulation" /><category term="method" /><category term="analysis" /><category term="statistics" /><category term="engineering" /><category term="equipment" /><category term="payback" /><category term="project" /><summary type="html">Introduction</summary></entry></feed>